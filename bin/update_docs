#!/usr/bin/perl

=head1 NAME

update_docs - convert Misterhouse's documentation to html

=head1 DESCRIPTION

Converts the Misterhouse pod format documentation into html.  It is
recommended that documentation be created along side the code it relates to.

=head1 INI PARAMETERS

=over

=item html_alias2_docs

This script will write its output to the directory specified in
C<html_alias2_docs>, otherwise it will write to C<../docs>.

=back

=head1 TODO

- Move some of the information that is better suited to the wiki out of 
the mh/docs directory.  This includes most of the html files in that 
directory.  Hopefully, this will inspire users to keep them up to date.   
 
- Try to standardize on pod format in mh/docs and make sure everything is 
linked from someplace else.  Many of the files in mh/docs are orphans.   
 
- Perhaps we should move some of the other documentation (like for global 
variables and functions) out of the pod files and into the actual scripts 
where they exist.  The idea here is it is more likely the documentation 
will be more up to date if it's close to the source code.  Does anyone 
know if there is a performance hit including documentation in-line?   
 
- Create an items.xml file that contains all the information required by 
read_table_A.pl, read_table_xml.pl, and the item editor web interface.  
Currently, it's a pain to add support for new items to these scripts and 
often only read_table_A.pl gets updated.  This should make it easier add 
new items and improve the documentation of items.   
 
=head1 AUTHOR

David Norwood <dnorwood2@yahoo.com>

=cut

# get our name and path, set library path
my ( $Pgm_Path, $Pgm_Name );

BEGIN {
    ( $Pgm_Path, $Pgm_Name ) = $0 =~ /(.*)[\\\/](.*)\.?/;
    ($Pgm_Name) = $0 =~ /([^.]+)/, $Pgm_Path = '.' unless $Pgm_Name;
    eval "use lib '$Pgm_Path/../lib', '$Pgm_Path/../lib/site';";    # Use BEGIN eval to keep perl2exe happy
    eval "push \@INC, '$Pgm_Path/../lib/fallback';";
}

use strict;
use warnings;
use Pod::Html;
use Cwd qw(abs_path);

# Get parms from mh.ini
require 'handy_utilities.pl';
my ( %config_parms, %parms );
&main::read_mh_opts( \%config_parms, $Pgm_Path );

my $docdir = "../docs";
my $outdir = $config_parms{html_alias2_docs};
my $libdir = '../lib';
$outdir = '../docs' unless $outdir;
mkdir "$outdir" unless -d "$outdir";

-d $docdir || die "directory $docdir doesn't exist";
-d $outdir || die "directory $outdir doesn't exist";
-d $libdir || die "directory $libdir doesn't exist";
-r $docdir || die "directory $docdir isn't readable";
-r $outdir || die "directory $outdir isn't readable";
-r $libdir || die "directory $libdir isn't readable";
-w $outdir || die "directory $outdir isn't writeable";
mkdir "$outdir/lib" unless -d "$outdir/lib";

# Define variables used in creating module and item lists
my ( $ipod, $mpod, %packages );
my $changes = 0;

print("[bin/update_docs] \$docdir:$docdir\n");
print("[bin/update_docs] \$outdir:$outdir\n");
print("[bin/update_docs] \$libdir:$libdir\n");

# Generate the list of directories to scan for pm or pl files
my %libsubdirs;
opendir LIB, $libdir || die "can't open $libdir directory: $!";
foreach ( readdir LIB ) {
    $libsubdirs{$_}{exists} = 1
      if ( -d "$libdir/$_"
        && !( $_ =~ /^site/i )
        && !( $_ =~ /^\.\./ ) );
}
closedir LIB;

foreach my $libsubdir ( keys %libsubdirs ) {
    $libdir = "../lib/$libsubdir";
    my $htmldir = "$outdir/lib/$libsubdir";
    mkdir "$htmldir" unless -d "$htmldir";

    # make list of module and script files in lib so we can extract pod doc later
    my %libfiles;
    opendir LIB, $libdir || die "can't open $libdir directory: $!";
    foreach ( readdir LIB ) {
        $libfiles{$_}{exists} = 1 if /\.p[lm]$/i;
    }
    closedir LIB;

    # make list of lib html files so we can delete obsolete ones
    my %htmlfiles;
    opendir OUT, $htmldir || die "can't open $htmldir directory: $!";
    foreach ( readdir OUT ) {
        $htmlfiles{$_}{exists} = 1 if /\.html$/i;
    }
    closedir OUT;

    # convert the pod doc in each changed pl or pm file into html
    foreach my $lib ( keys %libfiles ) {
        my $libfile  = "$libdir/$lib";
        my $htmlfile = "$htmldir/$lib";
        $htmlfile =~ s/\.p[lm]$/.html/i;
        $libfiles{$lib}{html} = $htmlfile;

        my $mdate = ( stat($libfile) )[9];
        my $hdate = ( stat($htmlfile) )[9];

        # If the HTML file older or doesn't exist make a new one
        if ( !-e $htmlfile or $mdate > $hdate ) {
            print "converting $libfile to $htmlfile\n";
            $changes++;
            pod2html(
                "--title=$lib",     "--infile=$libfile", "--outfile=$htmlfile", "--header", "--htmlroot=/docs/lib", "--htmldir=$htmldir/",
                "--podroot=../lib", "--podpath=.",       "--css=/lib/pod.css",
            );
        }
    }

    # Delete HTML files if the pm or pl file has been deleted
    foreach ( keys %htmlfiles ) {
        my $htmlfile = "$htmldir/$_";
        my $pm       = $_;
        my $pl       = $_;
        $pm =~ s/\.html$/.pm/i;
        $pl =~ s/\.html$/.pl/i;
        my $check;    #Don't invent keys that dont exist
        $check = $pm if ( exists( $libfiles{$pm} ) );
        $check = $pl if ( exists( $libfiles{$pl} ) );

        if ( !$check or !$libfiles{$check}{exists} ) {
            $changes++;
            print "deleting $htmlfile\n";
            unlink $htmlfile;
        }
    }

    # write out items and modules lists if any pm files changed
    if ($changes) {
        foreach my $pm ( keys %libfiles ) {
            next unless $pm =~ /.+\.pm$/i;
            my $html = $pm;
            $html =~ s/\.pm$/.html/i;
            my $noext = $pm;
            $noext =~ s/\.pm$//i;
            my $modfile  = "$libdir/$pm";
            my $htmlfile = "$htmldir/$html";

            my $fh;
            unless ( open( $fh, $modfile ) ) {
                print "Can't open $modfile, skipping: $!\n";
                next;
            }
            my $current_p;
            while ( my $l = <$fh> ) {
                if ( $l =~ /^package ([^;]+);/ ) {
                    $current_p                   = $1;
                    $packages{$current_p}{pm}    = $pm;
                    $packages{$current_p}{html}  = $html;
                    $packages{$current_p}{noext} = $noext;
                    $packages{$current_p}{class} =
                      ( $libsubdir eq "." ) ? '' : $libsubdir . "::";
                }
                elsif ( $l =~ /^sub new\s/ ) {
                    $packages{$current_p}{isitem} = 1 if $current_p;
                }
                elsif ( $l =~ /^=head/ ) {
                    $packages{$current_p}{haspod} = 1 if $current_p;
                }
            }
            print "didn't find any packages in $pm\n" unless $current_p;
            close $fh;
        }
    }
}

# Sort Packages and Place into Module or Item List
if ($changes) {
    foreach ( sort keys %packages ) {
        s/\//::/g;
        my $pod = "=item $_\n\n";
        if ( $packages{$_}{haspod} ) {
            $pod .= "L<$_|lib::" . $packages{$_}{class} . $packages{$_}{noext} . "/$_>\n\n";
        }
        else {
            $pod .= "package $_ in $packages{$_}{pm} isn't documented yet\n\n";
        }
        if ( $packages{$_}{isitem} ) {
            $ipod .= $pod;
        }
        else {
            $mpod .= $pod;
        }
    }
}

# Create Item List POD
if ($ipod) {
    print "writing $outdir/items.pod file\n";
    open TAR, "> $outdir/items.pod";
    print TAR "\n=head1 Items\n\n=over\n\n$ipod\n=back\n\n=cut\n";
    close TAR;
}

# Create Module List POD
if ($mpod) {
    print "writing $outdir/modules.pod file\n";
    open TAR, "> $outdir/modules.pod";
    print TAR "\n=head1 Modules\n\n=over\n\n$mpod\n=back\n\n=cut\n";
    close TAR;
}

# make list of distributed pod files that need to be converted to html
my %podfiles;
opendir POD, $docdir || die "can't open $docdir directory: $!";
foreach ( readdir POD ) {
    $podfiles{$_}{exists} = 1 if /\.pod$/i;
}
$podfiles{'items.pod'}{exists}   = 1 if -f "$outdir/items.pod";
$podfiles{'modules.pod'}{exists} = 1 if -f "$outdir/modules.pod";
closedir POD;

# delete html files from docs dir if out dir is diff and pod exists
my $docsi = ( stat($docdir) )[1];
my $outi  = ( stat($outdir) )[1];
print("[bin/update_docs] \$docsi:$docsi \$outi:$outi\n");
if (   ( ( $docsi == $outi ) && ( $outi == 0 ) && ( abs_path($docdir) eq abs_path($outdir) ) )
    || ( ( $docsi eq $outi ) && ( $outi != 0 ) ) )
{
    print "you should set the html_alias2_docs directory to a place outside"
      . " the mh distribution\n directory.  Otherwise, everytime this script is"
      . " run, you will alter\n your distribution files.\n";
}
else {
    # the following would delete files from the distribution docs dir
    # When MisterHouse is installed in the recommended fashion, this deletes a
    # number of files from the distribution directory structure.  I am disabling
    # for the moment, as I don't think we should be altering the distribution
    # directory structure
    #foreach ( keys %podfiles ) {
    #    s/\.pod$/.html/i;
    #    print("deleting $docdir/$_\n"), unlink "$docdir/$_" if -e "$docdir/$_";
    #}
    #foreach ( keys %libfiles ) {
    #    s/\.p[lm]$/.html/i;
    #    print("deleting $docdir/lib/$_\n"), unlink "$docdir/lib/$_"
    #      if -e "$docdir/lib/$_";
    #}
    #print("deleting $docdir/lib/\n"), rmdir "$docdir/lib" if -d "$docdir/lib";
    #print("deleting $docdir/modules.pod\n"), unlink "$docdir/modules.pod"
    #  if -w "$docdir/modules.pod";
    #print("deleting $docdir/items.pod\n"), unlink "$docdir/items.pod"
    #  if -w "$docdir/items.pod";
}

# convert any modified distributed pod files to html
foreach my $doc ( keys %podfiles ) {
    my $podfile = "$docdir/$doc";
    my $ind     = "";
    my $docdir2 = $docdir;
    if ( $doc eq "items.pod" or $doc eq "modules.pod" ) {
        $podfile = "$outdir/$doc";
        $ind     = "--noindex";
        $docdir2 = '..';
    }
    $doc =~ s/\.pod$//i;
    my $htmlfile = "$outdir/$doc.html";
    my $pdate    = 0;
    my $hdate    = 0;
    $pdate = ( stat($podfile) )[9]  if -f $podfile;
    $hdate = ( stat($htmlfile) )[9] if -f $htmlfile;

    if ( !-e "$outdir/$doc.html" or $pdate > $hdate ) {
        print "pod2html $podfile > $htmlfile\n";

        pod2html( "--infile=$podfile", "--outfile=$htmlfile", "--noheader", "--htmldir=$outdir", "--podroot=$docdir2", "--podpath=.",
            "--css=/lib/pod.css", $ind );
    }
}

=begin comment

perl ../bin/authors updates.pod > authors.html

# mh_users_table.pl is currently missing
# perl ../bin/mh_users_table.pl mh_usage.txt > mh_usage_table.html
=end
