#!/usr/bin/perl -W
#
# Cepstral TTS Engine
#
# Adapted by: Jason Sharpee <jason@sharpee.com>
# Based on code by: Eric Wieling <eric@fnords.org>

# Set the verbosity level of informational messages.
# Comment out for no messages, otherwise pick the Asterisk verbosity level.
$verbose = 1;

use Asterisk::AGI;
use File::Basename;
use File::Temp qw/ tempfile /;

# We need to initalize the AGI system.  This setups up the all important
# $AGI variable, as well as reads the data Asterisk is sending us (Caller*ID,
# Extension, etc.  We really don't do much more with it in this script.

$AGI = new Asterisk::AGI;
my %input = $AGI->ReadParse();

# Set up a callback in case the caller hangs up, not really critical, but it
# allows us to clean up any pending things that need to be done, like delete
# temp flies.

$AGI->setcallback( \&mycallback );

$failed = 0;

# We will assume all the sound files are in the same direcory as the script
$mydir = dirname($0);

#$ttstype = basename($ARGV[0]);
#$ttscommand = $ARGV[0];
$ttscommand = "/opt/theta/bin/theta";
$text       = $ARGV[0];

# Create a temporary file
( undef, $filename ) = tempfile( "/tmp/cepstralXXXXXX", SUFFIX => ".wav" );

# Run the actual Text-To-Speech, output to the temp file Microsoft RIFF (.wav)

# Needs to be told where home is, I can figure it out, why can't they?
$ENV{THETA_HOME} = dirname( dirname($ttscommand) );
$commandstring = "$ttscommand -F 8000 -o $filename \"$text\"";
verbose("CEPSTRAL: $commandstring");

#  system("$ttscommand -F 8000 -o $filename \"$text\"");
system($commandstring);

# Chop the extension off the filename, streamfile doesn't want a
# file extension
$streamfile = substr( $filename, 0, -4 );

# Play the file back to them, stream_file deals with all the hard work.
$AGI->stream_file($streamfile);

# DON'T leave temp files laying around.
unlink($filename);
exit(0);

# In theory this gets called if the caller hung up.
sub mycallback {

    # DON'T leave temp files laying around.
    unlink($filename);

    # Try to tell asterisk any exit code.
    my ($returncode) = @_;
    print STDERR "MYCALLBACK: User Hungup ($returncode)\n";
    exit($returncode);
}

# A little utility function so I can turn on and off messages with one
# variable.
sub verbose {
    if ( defined($verbose) ) {
        $AGI->verbose( "@_", $verbose );
        return (0);
    }
}

